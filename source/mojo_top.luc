module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output red,
    output green,
    output blue,
    output hsync,
    output vsync,
    input io_button[5],
    input ct_button[6],
    output ct_led[7]
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    button_conditioner button_cond[5];
    edge_detector edge_detector[5](#RISE(1), #FALL(0));
    
    button_conditioner controller_cond[6];
    edge_detector ct_edge[6](#RISE(1), #FALL(0));
    
    game game(.rst(rst));
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    button_cond.in = io_button;
    edge_detector.in = button_cond.out;
    
    controller_cond.in = ct_button;
    ct_edge.in = controller_cond.out;
    
    game.buttons = edge_detector.out;
    game.buttons[0] = ct_edge.out[0];
    game.buttons[3] = ct_edge.out[1];
    game.buttons[2] = ct_edge.out[2];
    game.buttons[4] = ct_edge.out[3];
    game.buttons[1] = ct_edge.out[4];
    
    red = game.red;
    green = game.green;
    blue = game.blue;
    hsync = game.hsync;
    vsync = game.vsync;
    ct_led = game.ct_led;
    
    led[7:5] = game.goldLed;
    led[3:0] = game.players;
  }
}