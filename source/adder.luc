module adder (
    input alufn[6],
    input op1[8],
    input op2[8],
    output out[8],
    output zOut,
    output vOut,
    output nOut
  ) {
  
  // Temporary signals for integer adder
  sig zComp;
  sig result[8];
  var i;
  
  // Temporary signals for FPU
  sig shift[4];
  sig amant[4];
  sig bmant[4];
  sig aexp[4];
  sig bexp[4];
  sig fresult[5];
  sig o1[8];
  sig o2[8];
  sig fmulres[8];
  sig fmulexp[4];
  sig fmulshift[4];
  
  always {
    // Set default output values
    zOut = 0;
    vOut = 0;
    nOut = 0;
    out = 8h00;
    
    // Selector for adder functions
    case(alufn) {
      // Integer operations
      Inst.ADD:
        result = op1 + op2; // Store result temporarily for extra operations
        out = result;
        
        // Calculate individual bit outputs
        nOut = result[7];
        vOut = (op1[7] & op2[7] & ~result[7]) | (~op1[7] & ~op2[7] & result[7]);
        zComp = result[0];
        for(i = 1; i < 8; i++) { // Use a for loop cos i'm lazy
          zComp = (zComp | result[i]);
        }
        zOut = ~zComp;
      Inst.SUB:
        o2 = -op2;
        result = op1 + o2; // Store result temporarily for extra opreations
        out = result;
        
        // Calculate individual bit outputs
        nOut = result[7];
        vOut = (op1[7] & o2[7] & ~result[7]) | (~op1[7] & ~o2[7] & result[7]);
        zComp = result[0];
        for(i = 1; i < 8; i++) { // Use a for loop cos i'm lazy
          zComp = (zComp | result[i]);
        }
        zOut = ~zComp;
      Inst.MUL:
        out = op1 * op2; // Ez pz
      /*Inst.DIV:
        out = $signed(op1) / $signed(op2);*/
      Inst.NEG:
        out = -op1; // Simple 2's complement negation
      Inst.ABS:
        out = (-op1 & 8x{op1[7]}) | (op1 & 8x{~op1[7]}); // Return the absolute value based on the negative bit
    }
  }
}
