/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module renderer2_17 (
    input clk,
    input [384:0] placed,
    input [10:0] treg,
    input blink,
    input [1:0] currentPlayer,
    output reg red,
    output reg green,
    output reg blue,
    output reg hsync,
    output reg vsync
  );
  
  
  
  reg [10:0] M_pixel_d, M_pixel_q = 1'h0;
  reg [10:0] M_line_d, M_line_q = 1'h0;
  wire [9-1:0] M_tiles_tile;
  reg [3-1:0] M_tiles_tileIndex;
  tileset_16 tiles (
    .clk(clk),
    .tileIndex(M_tiles_tileIndex),
    .tile(M_tiles_tile)
  );
  wire [3-1:0] M_image_pixel;
  reg [8-1:0] M_image_i;
  reg [9-1:0] M_image_j;
  image_22 image (
    .clk(clk),
    .i(M_image_i),
    .j(M_image_j),
    .pixel(M_image_pixel)
  );
  wire [3-1:0] M_moves_pixel;
  reg [6-1:0] M_moves_i;
  reg [7-1:0] M_moves_j;
  moves_23 moves (
    .clk(clk),
    .i(M_moves_i),
    .j(M_moves_j),
    .pixel(M_moves_pixel)
  );
  wire [3-1:0] M_turn_pixel;
  reg [6-1:0] M_turn_i;
  reg [7-1:0] M_turn_j;
  turn_24 turn (
    .clk(clk),
    .i(M_turn_i),
    .j(M_turn_j),
    .pixel(M_turn_pixel)
  );
  wire [3-1:0] M_player_pixel;
  reg [6-1:0] M_player_i;
  reg [8-1:0] M_player_j;
  player_25 player (
    .clk(clk),
    .i(M_player_i),
    .j(M_player_j),
    .pixel(M_player_pixel)
  );
  wire [3-1:0] M_numbers_pixel;
  reg [4-1:0] M_numbers_n;
  reg [6-1:0] M_numbers_i;
  reg [5-1:0] M_numbers_j;
  numbers_26 numbers (
    .clk(clk),
    .n(M_numbers_n),
    .i(M_numbers_i),
    .j(M_numbers_j),
    .pixel(M_numbers_pixel)
  );
  wire [3-1:0] M_slash_pixel;
  reg [6-1:0] M_slash_i;
  reg [5-1:0] M_slash_j;
  slash_27 slash (
    .clk(clk),
    .i(M_slash_i),
    .j(M_slash_j),
    .pixel(M_slash_pixel)
  );
  
  reg [6:0] gridSqX;
  reg [6:0] gridSqY;
  
  always @* begin
    M_line_d = M_line_q;
    M_pixel_d = M_pixel_q;
    
    M_image_i = 1'h0;
    M_image_j = 1'h0;
    M_moves_i = 1'h0;
    M_moves_j = 1'h0;
    M_turn_i = 1'h0;
    M_turn_j = 1'h0;
    M_player_i = 1'h0;
    M_player_j = 1'h0;
    M_numbers_i = 1'h0;
    M_numbers_j = 1'h0;
    M_numbers_n = 4'hb;
    M_slash_i = 1'h0;
    M_slash_j = 1'h0;
    M_tiles_tileIndex = 1'h0;
    red = 1'h0;
    green = 1'h0;
    blue = 1'h0;
    if (M_pixel_q < 10'h320 && M_line_q < 10'h258) begin
      if (M_pixel_q < 10'h210 && M_line_q < 8'hc8) begin
        M_image_i = M_line_q;
        M_image_j = M_pixel_q;
        red = M_image_pixel[2+0-:1];
        green = M_image_pixel[1+0-:1];
        blue = M_image_pixel[0+0-:1];
      end else begin
        if (M_pixel_q >= 10'h258 && M_pixel_q < 10'h2d8 && M_line_q >= 7'h40 && M_line_q < 8'h80) begin
          M_moves_i = M_line_q - 7'h40;
          M_moves_j = M_pixel_q - 10'h258;
          red = M_moves_pixel[2+0-:1];
          green = M_moves_pixel[1+0-:1];
          blue = M_moves_pixel[0+0-:1];
        end else begin
          if (M_pixel_q >= 10'h258 && M_pixel_q < 10'h270 && M_line_q >= 8'h80 && M_line_q < 8'hc0) begin
            M_numbers_i = M_line_q - 8'h80;
            M_numbers_j = M_pixel_q - 10'h258;
            M_numbers_n = 2'h3;
            red = M_numbers_pixel[2+0-:1];
            green = M_numbers_pixel[1+0-:1];
            blue = M_numbers_pixel[0+0-:1];
          end else begin
            if (M_pixel_q >= 10'h27c && M_pixel_q < 10'h294 && M_line_q >= 8'h80 && M_line_q < 8'hc0) begin
              M_numbers_i = M_line_q - 8'h80;
              M_numbers_j = M_pixel_q - 10'h27c;
              M_numbers_n = 1'h0;
              red = M_numbers_pixel[2+0-:1];
              green = M_numbers_pixel[1+0-:1];
              blue = M_numbers_pixel[0+0-:1];
            end else begin
              if (M_pixel_q >= 10'h2a8 && M_pixel_q <= 10'h2c0 && M_line_q >= 8'h80 && M_line_q < 8'hc0) begin
                M_slash_i = M_line_q - 8'h80;
                M_slash_j = M_pixel_q - 10'h2a8;
                red = M_slash_pixel[2+0-:1];
                green = M_slash_pixel[1+0-:1];
                blue = M_slash_pixel[0+0-:1];
              end else begin
                if (M_pixel_q >= 10'h2d4 && M_pixel_q < 10'h2ec && M_line_q >= 8'h80 && M_line_q < 8'hc0) begin
                  M_numbers_i = M_line_q - 8'h80;
                  M_numbers_j = M_pixel_q - 10'h2d4;
                  M_numbers_n = 2'h3;
                  red = M_numbers_pixel[2+0-:1];
                  green = M_numbers_pixel[1+0-:1];
                  blue = M_numbers_pixel[0+0-:1];
                end else begin
                  if (M_pixel_q >= 10'h2f8 && M_pixel_q < 10'h310 && M_line_q >= 8'h80 && M_line_q < 8'hc0) begin
                    M_numbers_i = M_line_q - 8'h80;
                    M_numbers_j = M_pixel_q - 10'h2d8;
                    M_numbers_n = 1'h0;
                    red = M_numbers_pixel[2+0-:1];
                    green = M_numbers_pixel[1+0-:1];
                    blue = M_numbers_pixel[0+0-:1];
                  end else begin
                    if (M_pixel_q >= 10'h258 && M_pixel_q < 10'h2ba && M_line_q >= 9'h100 && M_line_q < 9'h130) begin
                      M_turn_i = M_line_q - 9'h100;
                      M_turn_j = M_pixel_q - 10'h258;
                      red = M_turn_pixel[2+0-:1];
                      green = M_turn_pixel[1+0-:1];
                      blue = M_turn_pixel[0+0-:1];
                    end else begin
                      if (M_pixel_q >= 10'h258 && M_pixel_q < 10'h2e0 && M_line_q >= 9'h140 && M_line_q < 9'h170) begin
                        M_player_i = M_line_q - 9'h140;
                        M_player_j = M_pixel_q - 10'h258;
                        red = M_player_pixel[2+0-:1];
                        green = M_player_pixel[1+0-:1];
                        blue = M_player_pixel[0+0-:1];
                      end else begin
                        if (M_pixel_q >= 10'h2e8 && M_pixel_q < 10'h300 && M_line_q >= 9'h137 && M_line_q < 9'h178) begin
                          M_numbers_i = M_line_q - 9'h137;
                          M_numbers_j = M_pixel_q - 10'h2e8;
                          M_numbers_n = currentPlayer;
                          red = M_numbers_pixel[2+0-:1];
                          green = M_numbers_pixel[1+0-:1];
                          blue = M_numbers_pixel[0+0-:1];
                        end else begin
                          if (M_pixel_q >= 10'h210 && M_pixel_q <= 10'h212 && M_line_q >= 8'hc8 || M_pixel_q < 10'h210 && M_line_q < 8'hca && M_line_q >= 8'hc8) begin
                            red = 1'h1;
                            green = 1'h1;
                            blue = 1'h1;
                          end else begin
                            if (M_pixel_q < 10'h210 && M_line_q >= 8'hca) begin
                              gridSqX = M_pixel_q >> 3'h4;
                              gridSqY = (M_line_q - 8'hca) >> 3'h4;
                              if (gridSqX / 2'h3 == treg[7+3-:4] && gridSqY / 2'h3 == treg[4+2-:3] && treg[0+2-:3] != 1'h0) begin
                                M_tiles_tileIndex = treg[0+2-:3];
                                if (treg[3+0-:1] == 1'h0) begin
                                  red = M_tiles_tile[(((gridSqY - ((gridSqY / 2'h3) * 2'h3)) * 2'h3) + gridSqX - ((gridSqX / 2'h3) * 2'h3))*1+0-:1] & blink;
                                  green = 1'h0;
                                  blue = 1'h0;
                                end else begin
                                  red = 1'h0;
                                  green = M_tiles_tile[(((gridSqY - ((gridSqY / 2'h3) * 2'h3)) * 2'h3) + gridSqX - ((gridSqX / 2'h3) * 2'h3))*1+0-:1] & blink;
                                  blue = 1'h0;
                                end
                              end else begin
                                if (gridSqX < 6'h21 && gridSqY < 5'h15 && placed[(gridSqY / 2'h3)*55+(gridSqX / 2'h3)*5+1+2-:3] != 1'h0) begin
                                  M_tiles_tileIndex = placed[(gridSqY / 2'h3)*55+(gridSqX / 2'h3)*5+2+2-:3];
                                  if (placed[(gridSqY / 2'h3)*55+(gridSqX / 2'h3)*5+0+1-:2] == 1'h0) begin
                                    red = M_tiles_tile[(((gridSqY - ((gridSqY / 2'h3) * 2'h3)) * 2'h3) + gridSqX - ((gridSqX / 2'h3) * 2'h3))*1+0-:1];
                                    green = M_tiles_tile[(((gridSqY - ((gridSqY / 2'h3) * 2'h3)) * 2'h3) + gridSqX - ((gridSqX / 2'h3) * 2'h3))*1+0-:1];
                                    blue = M_tiles_tile[(((gridSqY - ((gridSqY / 2'h3) * 2'h3)) * 2'h3) + gridSqX - ((gridSqX / 2'h3) * 2'h3))*1+0-:1];
                                  end else begin
                                    if (placed[(gridSqY / 2'h3)*55+(gridSqX / 2'h3)*5+0+1-:2] == 1'h1) begin
                                      red = M_tiles_tile[(((gridSqY - ((gridSqY / 2'h3) * 2'h3)) * 2'h3) + gridSqX - ((gridSqX / 2'h3) * 2'h3))*1+0-:1];
                                      green = 1'h0;
                                      blue = 1'h0;
                                    end else begin
                                      if (placed[(gridSqY / 2'h3)*55+(gridSqX / 2'h3)*5+0+1-:2] == 2'h3) begin
                                        red = 1'h0;
                                        green = M_tiles_tile[(((gridSqY - ((gridSqY / 2'h3) * 2'h3)) * 2'h3) + gridSqX - ((gridSqX / 2'h3) * 2'h3))*1+0-:1];
                                        blue = 1'h0;
                                      end else begin
                                        red = 1'h1;
                                        green = 1'h1;
                                        blue = 1'h0;
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if (M_pixel_q >= 12'h357 && M_pixel_q <= 13'h03ce) begin
      hsync = 1'h1;
    end else begin
      hsync = 1'h0;
    end
    if (M_line_q >= 12'h27c && M_line_q <= 13'h0281) begin
      vsync = 1'h1;
    end else begin
      vsync = 1'h0;
    end
    if (M_pixel_q == 14'h040f) begin
      if (M_line_q == 14'h0299) begin
        M_line_d = 1'h0;
      end else begin
        M_line_d = M_line_q + 1'h1;
      end
      M_pixel_d = 1'h0;
    end else begin
      M_pixel_d = M_pixel_q + 1'h1;
    end
  end
  
  always @(posedge clk) begin
    M_pixel_q <= M_pixel_d;
    M_line_q <= M_line_d;
  end
  
endmodule
