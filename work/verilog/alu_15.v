/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_15 (
    input [5:0] alufn,
    input [7:0] op1,
    input [7:0] op2,
    output reg [7:0] r_op1,
    output reg [7:0] r_op2,
    output reg [7:0] out
  );
  
  
  
  wire [8-1:0] M_adder_out;
  wire [1-1:0] M_adder_zOut;
  wire [1-1:0] M_adder_vOut;
  wire [1-1:0] M_adder_nOut;
  adder_18 adder (
    .op1(op1),
    .op2(op2),
    .alufn(alufn),
    .out(M_adder_out),
    .zOut(M_adder_zOut),
    .vOut(M_adder_vOut),
    .nOut(M_adder_nOut)
  );
  wire [8-1:0] M_boolean_out;
  boolean_19 boolean (
    .op1(op1),
    .op2(op2),
    .alufn(alufn),
    .out(M_boolean_out)
  );
  
  wire [8-1:0] M_shifter_out;
  shifter_20 shifter (
    .alufn(alufn),
    .op1(op1),
    .op2(op2[0+4-:5]),
    .out(M_shifter_out)
  );
  
  wire [8-1:0] M_compare_out;
  reg [1-1:0] M_compare_z;
  reg [1-1:0] M_compare_v;
  reg [1-1:0] M_compare_n;
  compare_21 compare (
    .alufn(alufn),
    .z(M_compare_z),
    .v(M_compare_v),
    .n(M_compare_n),
    .out(M_compare_out)
  );
  
  always @* begin
    out = 8'bxxxxxxxx;
    r_op1 = op1;
    r_op2 = op2;
    M_compare_z = M_adder_zOut;
    M_compare_n = M_adder_nOut;
    M_compare_v = M_adder_vOut;
    
    case (alufn[4+1-:2])
      2'h0: begin
        out = M_adder_out;
      end
      2'h1: begin
        out = M_boolean_out;
      end
      2'h2: begin
        out = M_shifter_out;
      end
      2'h3: begin
        out = M_compare_out;
      end
    endcase
  end
endmodule
