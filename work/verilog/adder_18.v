/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module adder_18 (
    input [5:0] alufn,
    input [7:0] op1,
    input [7:0] op2,
    output reg [7:0] out,
    output reg zOut,
    output reg vOut,
    output reg nOut
  );
  
  
  
  reg zComp;
  
  reg [7:0] result;
  
  integer i;
  
  reg [3:0] shift;
  
  reg [3:0] amant;
  
  reg [3:0] bmant;
  
  reg [3:0] aexp;
  
  reg [3:0] bexp;
  
  reg [4:0] fresult;
  
  reg [7:0] o1;
  
  reg [7:0] o2;
  
  reg [7:0] fmulres;
  
  reg [3:0] fmulexp;
  
  reg [3:0] fmulshift;
  
  always @* begin
    zOut = 1'h0;
    vOut = 1'h0;
    nOut = 1'h0;
    out = 8'h00;
    
    case (alufn)
      6'h00: begin
        result = op1 + op2;
        out = result;
        nOut = result[7+0-:1];
        vOut = (op1[7+0-:1] & op2[7+0-:1] & ~result[7+0-:1]) | (~op1[7+0-:1] & ~op2[7+0-:1] & result[7+0-:1]);
        zComp = result[0+0-:1];
        for (i = 1'h1; i < 4'h8; i = i + 1) begin
          zComp = (zComp | result[(i)*1+0-:1]);
        end
        zOut = ~zComp;
      end
      6'h01: begin
        o2 = -op2;
        result = op1 + o2;
        out = result;
        nOut = result[7+0-:1];
        vOut = (op1[7+0-:1] & o2[7+0-:1] & ~result[7+0-:1]) | (~op1[7+0-:1] & ~o2[7+0-:1] & result[7+0-:1]);
        zComp = result[0+0-:1];
        for (i = 1'h1; i < 4'h8; i = i + 1) begin
          zComp = (zComp | result[(i)*1+0-:1]);
        end
        zOut = ~zComp;
      end
      6'h02: begin
        out = op1 * op2;
      end
      6'h04: begin
        out = -op1;
      end
      6'h05: begin
        out = (-op1 & {4'h8{op1[7+0-:1]}}) | (op1 & {4'h8{~op1[7+0-:1]}});
      end
    endcase
  end
endmodule
