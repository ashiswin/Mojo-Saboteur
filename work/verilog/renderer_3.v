/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module renderer_3 (
    input clk,
    input [224:0] placed,
    input [71:0] tiles,
    output reg red,
    output reg green,
    output reg blue,
    output reg hsync,
    output reg vsync
  );
  
  
  
  reg [10:0] M_pixel_d, M_pixel_q = 1'h0;
  reg [10:0] M_line_d, M_line_q = 1'h0;
  
  integer gridSqX;
  integer gridSqY;
  
  always @* begin
    M_pixel_d = M_pixel_q;
    M_line_d = M_line_q;
    
    if (M_pixel_q < 10'h320 && M_line_q < 10'h258) begin
      gridSqX = M_pixel_q / 5'h10;
      gridSqY = M_line_q / 5'h10;
      if (gridSqX < 5'h1b && gridSqY < 4'hf && placed[(gridSqY / 2'h3)*45+(gridSqX / 2'h3)*5+1+2-:3] != 1'h0) begin
        if (placed[(gridSqY / 2'h3)*45+(gridSqX / 2'h3)*5+0+1-:2] == 1'h0) begin
          red = tiles[(placed[(gridSqY / 2'h3)*45+(gridSqX / 2'h3)*5+2+2-:3])*9+(gridSqY - ((gridSqY / 2'h3) * 2'h3))*3+(gridSqX - ((gridSqX / 2'h3) * 2'h3))*1+0-:1];
          green = tiles[(placed[(gridSqY / 2'h3)*45+(gridSqX / 2'h3)*5+2+2-:3])*9+(gridSqY - ((gridSqY / 2'h3) * 2'h3))*3+(gridSqX - ((gridSqX / 2'h3) * 2'h3))*1+0-:1];
          blue = tiles[(placed[(gridSqY / 2'h3)*45+(gridSqX / 2'h3)*5+2+2-:3])*9+(gridSqY - ((gridSqY / 2'h3) * 2'h3))*3+(gridSqX - ((gridSqX / 2'h3) * 2'h3))*1+0-:1];
        end else begin
          if (placed[(gridSqY / 2'h3)*45+(gridSqX / 2'h3)*5+0+1-:2] == 1'h1) begin
            red = tiles[(placed[(gridSqY / 2'h3)*45+(gridSqX / 2'h3)*5+2+2-:3])*9+(gridSqY - ((gridSqY / 2'h3) * 2'h3))*3+(gridSqX - ((gridSqX / 2'h3) * 2'h3))*1+0-:1];
            green = 1'h0;
            blue = 1'h0;
          end else begin
            if (placed[(gridSqY / 2'h3)*45+(gridSqX / 2'h3)*5+0+1-:2] == 2'h3) begin
              red = 1'h0;
              green = tiles[(placed[(gridSqY / 2'h3)*45+(gridSqX / 2'h3)*5+2+2-:3])*9+(gridSqY - ((gridSqY / 2'h3) * 2'h3))*3+(gridSqX - ((gridSqX / 2'h3) * 2'h3))*1+0-:1];
              blue = 1'h0;
            end else begin
              red = 1'h1;
              green = 1'h1;
              blue = 1'h0;
            end
          end
        end
      end else begin
        red = 1'h0;
        green = 1'h0;
        blue = 1'h0;
      end
    end else begin
      red = 1'h0;
      green = 1'h0;
      blue = 1'h0;
    end
    if (M_pixel_q >= 12'h357 && M_pixel_q <= 13'h03ce) begin
      hsync = 1'h1;
    end else begin
      hsync = 1'h0;
    end
    if (M_line_q >= 12'h27c && M_line_q <= 13'h0281) begin
      vsync = 1'h1;
    end else begin
      vsync = 1'h0;
    end
    if (M_pixel_q == 14'h040f) begin
      if (M_line_q == 14'h0299) begin
        M_line_d = 1'h0;
      end else begin
        M_line_d = M_line_q + 1'h1;
      end
      M_pixel_d = 1'h0;
    end else begin
      M_pixel_d = M_pixel_q + 1'h1;
    end
  end
  
  always @(posedge clk) begin
    M_pixel_q <= M_pixel_d;
    M_line_q <= M_line_d;
  end
  
endmodule
