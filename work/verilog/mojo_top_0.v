/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg red,
    output reg green,
    output reg blue,
    output reg hsync,
    output reg vsync,
    input [4:0] io_button,
    input [5:0] ct_button,
    output reg [6:0] ct_led
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [(3'h5+0)-1:0] M_button_cond_out;
  reg [(3'h5+0)-1:0] M_button_cond_in;
  
  genvar GEN_button_cond0;
  generate
  for (GEN_button_cond0=0;GEN_button_cond0<3'h5;GEN_button_cond0=GEN_button_cond0+1) begin: button_cond_gen_0
    button_conditioner_2 button_cond (
      .clk(clk),
      .in(M_button_cond_in[GEN_button_cond0*(1)+(1)-1-:(1)]),
      .out(M_button_cond_out[GEN_button_cond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(3'h5+0)-1:0] M_edge_detector_out;
  reg [(3'h5+0)-1:0] M_edge_detector_in;
  
  genvar GEN_edge_detector0;
  generate
  for (GEN_edge_detector0=0;GEN_edge_detector0<3'h5;GEN_edge_detector0=GEN_edge_detector0+1) begin: edge_detector_gen_0
    edge_detector_3 edge_detector (
      .clk(clk),
      .in(M_edge_detector_in[GEN_edge_detector0*(1)+(1)-1-:(1)]),
      .out(M_edge_detector_out[GEN_edge_detector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(3'h6+0)-1:0] M_controller_cond_out;
  reg [(3'h6+0)-1:0] M_controller_cond_in;
  
  genvar GEN_controller_cond0;
  generate
  for (GEN_controller_cond0=0;GEN_controller_cond0<3'h6;GEN_controller_cond0=GEN_controller_cond0+1) begin: controller_cond_gen_0
    button_conditioner_2 controller_cond (
      .clk(clk),
      .in(M_controller_cond_in[GEN_controller_cond0*(1)+(1)-1-:(1)]),
      .out(M_controller_cond_out[GEN_controller_cond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(3'h6+0)-1:0] M_ct_edge_out;
  reg [(3'h6+0)-1:0] M_ct_edge_in;
  
  genvar GEN_ct_edge0;
  generate
  for (GEN_ct_edge0=0;GEN_ct_edge0<3'h6;GEN_ct_edge0=GEN_ct_edge0+1) begin: ct_edge_gen_0
    edge_detector_3 ct_edge (
      .clk(clk),
      .in(M_ct_edge_in[GEN_ct_edge0*(1)+(1)-1-:(1)]),
      .out(M_ct_edge_out[GEN_ct_edge0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [1-1:0] M_game_red;
  wire [1-1:0] M_game_green;
  wire [1-1:0] M_game_blue;
  wire [1-1:0] M_game_hsync;
  wire [1-1:0] M_game_vsync;
  wire [7-1:0] M_game_ct_led;
  wire [4-1:0] M_game_players;
  wire [3-1:0] M_game_goldLed;
  reg [5-1:0] M_game_buttons;
  game_6 game (
    .clk(clk),
    .rst(rst),
    .buttons(M_game_buttons),
    .red(M_game_red),
    .green(M_game_green),
    .blue(M_game_blue),
    .hsync(M_game_hsync),
    .vsync(M_game_vsync),
    .ct_led(M_game_ct_led),
    .players(M_game_players),
    .goldLed(M_game_goldLed)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_button_cond_in = io_button;
    M_edge_detector_in = M_button_cond_out;
    M_controller_cond_in = ct_button;
    M_ct_edge_in = M_controller_cond_out;
    M_game_buttons = M_edge_detector_out;
    M_game_buttons[0+0-:1] = M_ct_edge_out[0+0-:1];
    M_game_buttons[3+0-:1] = M_ct_edge_out[1+0-:1];
    M_game_buttons[2+0-:1] = M_ct_edge_out[2+0-:1];
    M_game_buttons[4+0-:1] = M_ct_edge_out[3+0-:1];
    M_game_buttons[1+0-:1] = M_ct_edge_out[4+0-:1];
    red = M_game_red;
    green = M_game_green;
    blue = M_game_blue;
    hsync = M_game_hsync;
    vsync = M_game_vsync;
    ct_led = M_game_ct_led;
    led[5+2-:3] = M_game_goldLed;
    led[0+3-:4] = M_game_players;
  end
endmodule
